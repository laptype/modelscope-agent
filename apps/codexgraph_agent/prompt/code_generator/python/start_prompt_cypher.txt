### Text Queries:
${text_queries}

### Task Instructions:
Your task is to decompose the given text queries into several simple ones and try to use precise or fuzzy matching, and then translate the decomposed text queries into the corresponding Cypher queries. You answer should follow the below formats:

[start_of_cypher_queries]
### Query 1
**decomposed text query**: 
```cypher
<cypher_query>
```

### Query 2
**decomposed text query**:
```cypher
<cypher_query>
```
...

### Query n
**decomposed text query**: 
```cypher
<cypher_query>
```
[end_of_cypher_queries]

Here are some useful tips:
1. Try adding exception handling logic (e.g., `OPTIONAL`, `OR`) to return error information or handle edge cases in Cypher queries.
2. Use appropriate Cypher patterns and aggregation functions to handle exceptions and edge cases that may occur in queries.
3. Try to use the nodes (CLASS, METHOD, FUNCTION, FIELD, GLOBAL_VARIABLE, MODULE) and egdes (CONTAINS, HAS_METHOD, HAS_FIELD, USES, INHERITES) in the schema to rewrite text queries instead of using ambiguous expressions like `attributes` or `objects`.
4. Use fuzzy matching when retrieving nodes to avoid issues with absolute paths. For example, use the following Cypher query: `WHERE m.name =~ '.*<node_name>'`

# Useful Example:
1. Query all methods and fields under a Class under a Module:
```cypher
MATCH (mod:MODULE {name: '<module name>'})
MATCH (mod)-[:CONTAINS]->(cls:CLASS {name: '<class name>'})
MATCH (cls)-[:HAS_METHOD]->(method:METHOD)
MATCH (cls)-[:HAS_FIELD]->(field:FIELD)
RETURN method.name, field.code
```
2. Query all fields under a Class:
```cypher
MATCH (c:CLASS {name: 'YourClassName'})-[:HAS_FIELD]->(f) RETURN f.name, f.code
```
4. Query the code of a specific method:
```cypher
MATCH (m:METHOD {name: 'yourMethodName'}) RETURN m.code
```