### Code to be Unittest:
<code>
```python
${file_path}
${user_query}
```
</code>

### Task Instructions:
Your ultimate goal is to analyze a specific class/function's functionality and write professional unittests for it, enclosed by <code> and </code>. To achieve this, you must analyze the given code first. Post-analysis, you have two action options:
1. `GENERATE_UNITTEST`, Use this action to generate unittests for class/function in one step.
2. `TEXT_QUERIES`, Use this action to write text queries to retrieve relevant information from the graph database.

#### Professional Unittest Notes
1. Setup and Teardown Methods: Define setup methods to initialize any resources needed for the tests.
2. Test Case Descriptions: Clearly describe each test case, specifying what functionality it is testing and the expected outcome.
3. Test Methods: Implement individual test methods for each functionality of the class. Use descriptive names for test methods to indicate what is being tested.
4. Assertions: Use assertions to verify that the actual outcomes match the expected results. Cover positive, negative, and edge cases in the assertions.
5. Mocking and Stubbing: Mock dependencies and external services to isolate the functionality of the class being tested.
6. Code Coverage: Ensure that all methods and code paths of the class are covered by the tests. Aim for high code coverage to minimize untested scenarios.

#### Generalized Steps for Creating Unit Tests
1. Understand the Class and Methods: Analyze the class and its methods to understand their functionality and expected behavior. Ensure that all methods and code paths of the class are covered by the tests.
2. Identify Class Dependencies: Identify and understand the dependencies of the class, including parent classes and associated classes or modules.
3. Determine the key functionalities and methods of the class that require testing.
4. Design Test Cases for Each Functionality: Design test cases for each identified functionality, covering normal, boundary, and edge cases.
5. Implement Test Code: Implement the test cases using the 'unittest' framework, ensuring each test case is independent.

#### Information Needed for Writing Unit Tests
1. A Text Query only retrieve all methods' `name` Attributes of the CLASS. Determine the key functionalities and methods of the class that require testing.
2. A Text Query only retrieve all fields' `code` Attributes of the CLASS.
3. A Text Query only retrieve all `INHERITS` edges related CLASS. Identify and understand the dependencies of the class, including parent classes and associated classes or modules.
4. Some Text Queries retrieve any information you needed: (specific Classes/Methods/Fields)

#### Final Output Format:
You will format your final output as follows:
```json
{{"thought": "$$THOUGHT", "action": "$$ACTION_NAME", "action_input": "$$INPUT"}}
```
Specifically,
1. for the GENERATE_UNITTEST action, replace $$INPUT with useful hints derived from your retrieved content and analysis.
2. for the TEXT_QUERIES action, $$INPUT is the text query statement, formatted as:
[start_of_text_queries]
### Text Query 1
<text_description_of_the_query>

### Text Query 2
<text_description_of_the_query>
...
### Text Query n
<text_description_of_the_query>
[end_of_text_queries]
3. In the thought section, replace $$THOUGHT with a detailed analysis of the current context.

#### Notes:
1. Ensure the comments are meaningful, clear, and follow standard commenting practices.
2. Analyze the code thoroughly before adding comments to ensure accuracy and relevance.
3. When taking TEXT_QUERIES action:
    - Adhere strictly to the provided schema, and avoid creating your own nodes and edges.
    - Use the nodes and edges defined in the schema for your text queries, rather than ambiguous expressions.
    - Ensure your text queries are fact-based, descriptive, and clear; avoid inferential or assumption-based queries.
    - If you cannot find the desired information from a class, consider examining its base classes.
    - If the desired class, method, or function is not found in the specified module, it might be due to re-exporting or because the module comes from external libraries.
    - Pay attention to the imports in the provided code file; they offer module path hints for the target objects.
4. Preferred Text Queries Examples:
    - Retrieve all methods and fields of the class "XYZ" in the "a.b.c" module.
    - Retrieve all functions within the "a.b.c.d" module.
    - Retrieve functions whose names contain "get" within the "a.b.c.d" module.
    - Retrieve the method named "example_func" from the class "ABC" or any of its base classes.
5. You can only perform one action per round.
6. It is not recommended to take GENERATE_UNITTEST actions if you have not gathered specific code information.
